#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs')
  , exec = require('child_process').exec;

/**
 * Framework version.
 */

var version = '2.4.3';

/**
 * Default css template.
 */

var css = [
    'body {'
  , '  padding: 50px;'
  , '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;'
  , '}'
  , ''
  , 'a {'
  , '  color: #00B7FF;'
  , '}'
].join('\n');


/**
 * Usage documentation.
 */

var usage = ''
  + '\n'
  + '  Usage: uptown [options] [path]\n'
  + '\n'
  + '  Options:\n'
  + '    -h, --help               output help information\n'
  ;


/**
 * App template.
 */

var app = [
    ''
  , '/**'
  , ' * Module dependencies.'
  , ' */'
  , ''
  , 'var uptown = require(\'uptown\');'
  , ''
  , 'uptown.init(__dirname).start();'
  , ''
].join('\n');

// Parse arguments

var args = process.argv.slice(2)
  , path = '.';

while (args.length) {
  var arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
      abort(usage);
      break;
    case '-v':
    case '--version':
      abort(version);
      break;
    case '-s':
    case '--session':
    case '--sessions':
      sessions = true;
      break;
    case '-c':
    case '--css':
      args.length
        ? (cssEngine = args.shift())
        : abort('--css requires an argument');
      break;
    case '-t':
    case '--template':
      args.length
        ? (templateEngine = args.shift())
        : abort('--template requires an argument');
      break;
    default:
        path = arg;
  }
}

// Generate application

(function createApplication(path) {
  emptyDirectory(path, function(empty){
    if (empty) {
      createApplicationAt(path);
    } else {
      confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(path);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path) {
  mkdir(path, function(){
    mkdir(path + '/public/controllers');
    mkdir(path + '/db', function () {
      mkdir(path + '/db/migrations');
    });
    mkdir(path + '/models', function () {
      mkdir(path + '/models/client');
      mkdir(path + '/models/server');
    });
    
    mkdir(path + '/test', function () {
      mkdir(path + '/test/unit');
      mkdir(path + '/test/integration');
    });
    mkdir(path + '/public/javascripts');
    mkdir(path + '/public/images');
    mkdir(path + '/public/stylesheets', function(){
      switch (cssEngine) {
        default:
          write(path + '/public/stylesheets/style.css', css);
      }
    });
    mkdir(path + '/views', function(){
      write(path + '/views/layout.jade', jadeLayout);
      write(path + '/views/index.jade', jadeIndex);
    });

    // package.json
    var json = '{\n';
    json += '    "name": "application-name"\n';
    json += '  , "version": "0.0.1"\n';
    json += '  , "private": true\n';
    json += '  , "dependencies": {\n';
    json += '      "uptown": "' + version + '"\n';
    json += '  }\n';
    json += '}';


    write(path + '/package.json', json);
    write(path + '/app.js', app);
  });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
  fs.writeFile(path, str);
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Prompt confirmation with the given `msg`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function confirm(msg, fn) {
  prompt(msg, function(val){
    fn(/^ *y(es)?/i.test(val));
  });
}

/**
 * Prompt input with the given `msg` and callback `fn`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function prompt(msg, fn) {
  // prompt
  if (' ' == msg[msg.length - 1]) {
    process.stdout.write(msg);
  } else {
    console.log(msg);
  }

  // stdin
  process.stdin.setEncoding('ascii');
  process.stdin.once('data', function(data){
    fn(data);
  }).resume();
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  exec('mkdir -p ' + path, function(err){
    if (err) throw err;
    console.log('   \x1b[36mcreate\x1b[0m : ' + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}